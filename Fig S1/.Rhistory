knitr::opts_chunk$set(echo = TRUE)
# Clean workspace
rm(list=ls())
# Set output directory
output_dir="./"
library(xlsx)
library(randomForest)
library(caret)
library(caret)
library(pROC)
library(xlsx)
file="./ARGs DATA.xlsx"
df=read.xlsx(file,2,header=T,row.names=1)
dim(df)
#将数据随机分为训练集和测试集
trainlist=createDataPartition(df$group,p=0.6,list = F)#0.6表示提取60%的数据用于训练模型
View(df)
df=t(df)
df=as.data.frame(t(df))
dim(df)
#将数据随机分为训练集和测试集
trainlist=createDataPartition(df$group,p=0.6,list = F)#0.6表示提取60%的数据用于训练模型
View(df)
df=read.xlsx(file,2,header=T,row.names=1)
View(df)
df=as.data.frame(t(df))
View(df)
#将数据随机分为训练集和测试集
trainlist=createDataPartition(rownames(df),p=0.6,list = F)#0.6表示提取60%的数据用于训练模型
trainset=df[trainlist,]
testset=df[-trainlist,]
#1.build model，使用训练集构建模型
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#1.build model，使用训练集构建模型
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
View(trainset)
View(testset)
df=read.xlsx(file,2,header=T,row.names=1)
group=read.xlsx(file,2,header=T,row.names=1)
group=read.xlsx(file,7,header=T,row.names=1)
df=read.xlsx(file,2,header=T,row.names=1)
View(df)
df=as.data.frame(t(df))
View(df)
df=read.xlsx(file,2,header=T)
df=as.data.frame(t(df))
View(df)
df=read.xlsx(file,2,header=T,row.names=1)
df=as.data.frame(t(df))
group=read.xlsx(file,7,header=T,row.names=1)
dim(df)
trainlist=createDataPartition(group$group,p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
View(df)
View(group)
df=read.xlsx(file,2,header=T,row.names=1)
dim(df)
trainlist=createDataPartition(df,p=0.6,list = F)
df=read.xlsx(file,2,header=T,row.names=1)
dim(df)
df=read.xlsx(file,2,header=T)
dim(df)
trainlist=createDataPartition(df$, p=0.6,list = F)
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
plot(rf.train,main="randomforest origin")
varImpPlot(rf.train)
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
View(trainset)
View(testset)
View(testset)
?trainset
??trainset
?createDataPartition
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
df=read.xlsx(file,2,header=T,row.names=1)
dim(df)
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
View(trainset)
View(testset)
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
plot(rf.train,main="randomforest origin")
varImpPlot(rf.train)
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
#####
rf.test2=predict(rf.train,newdata = testset,type="prob")
roc.rf=multiclass.roc(testset$group, rf.test2)
roc.rf_1=multiclass.roc(testset$group, rf.test2[,1])
plot(roc.rf_1$rocs[[1]],col="blue")
plot(roc.rf_1$rocs[[2]],add=T,col="red")
auc(roc.rf_1)
trainlist=createDataPartition(df$group, p=0.4,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
plot(rf.train,main="randomforest origin")
set=importance(rf.train)
varImpPlot(rf.train)
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
#####
rf.test2=predict(rf.train,newdata = testset,type="prob")
roc.rf=multiclass.roc(testset$group, rf.test2)
roc.rf_1=multiclass.roc(testset$group, rf.test2[,1])
plot(roc.rf_1$rocs[[1]],col="blue")
plot(roc.rf_1$rocs[[2]],add=T,col="red")
auc(roc.rf_1)
View(roc.rf_1)
rf.test2
rf.test2[,1]
View(roc.rf)
plot(roc.rf$rocs[[1]],col="blue")
roc.rf=multiclass.roc(testset$group, rf.test2)
plot(roc.rf$rocs[[1]],col="blue")
View(roc.rf)
roc.rf$rocs$`0/1`
plot(roc.rf$rocs$`0/1`[[1]],col="blue")
plot(roc.rf$rocs$`0/1`[[2]],col="red")
plot(roc.rf$rocs$`0/1`[[2]],add=T,col="red")
plot(roc.rf$rocs$`0/1`[[1]],col="blue")
plot(roc.rf$rocs$`0/1`[[2]],add=T,col="red")
auc(roc.rf)
library(randomForest)
library(caret)
library(pROC)
library(xlsx)
file="./ARGs DATA.xlsx"
df=read.xlsx(file,2,header=T,row.names=1)
dim(df)
trainlist=createDataPartition(df$group, p=0.4,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
plot(roc.rf$rocs$`0/1`[[1]],col="blue")
rf.cf
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
trainlist=createDataPartition(df$group, p=0.8,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
trainlist=createDataPartition(df$group, p=0.5,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
#####
rf.test2=predict(rf.train,newdata = testset,type="prob")
roc.rf=multiclass.roc(testset$group, rf.test2)
roc.rf_1=multiclass.roc(testset$group, rf.test2[,1])
plot(roc.rf_1$rocs[[1]],col="blue")
plot(roc.rf_1$rocs[[2]],add=T,col="red")
plot(roc.rf_1$rocs[[1]],col="blue")
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
########
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
plot(rf.train,main="randomforest origin")
set=importance(rf.train)
#####
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
#####
rf.test2=predict(rf.train,newdata = testset,type="prob")
rf.cf
rf.test2
roc.rf=multiclass.roc(testset$group, rf.test2)
roc.rf_1=multiclass.roc(testset$group, rf.test2[,1])
roc.rf
View(roc.rf_1)
rf.test=predict(rf.train,newdata = df,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
?caret::confusionMatrix
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
#####1.build model
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####2.test prediction
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
trainlist=createDataPartition(df$group, p=0.9,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
#####1.build model
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
#####2.test prediction
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
trainlist=createDataPartition(df$group, p=0.4,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
#####1.build model
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####2.test prediction
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
trainlist=createDataPartition(df$group, p=0.6,list = F)
trainset=df[trainlist,]
testset=df[-trainlist,]
#####1.build model
set.seed(123)
rf.train=randomForest(as.factor(group)~.,data=trainset,importance=T,na.action = na.pass)
rf.train
#####2.test prediction
set.seed(456)
rf.test=predict(rf.train,newdata = testset,type = "class")
rf.test
rf.cf=caret::confusionMatrix(as.factor(rf.test),as.factor(testset$group))
rf.cf
